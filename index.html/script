<!DOCTYPE html><html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>T‚ÄëRex Runner ‚Äî Realistic Edition</title>
  <style>
    :root{--bg:#0b1020;--panel:#0f172a;--ink:#e5e7eb;--muted:#94a3b8;--accent:#38bdf8;--card:#111827}
    *{box-sizing:border-box}
    body{margin:0;background:radial-gradient(1200px 600px at 50% -10%,#1f2937 0,#0b1020 50%);color:var(--ink);font:14px/1.3 ui-sans-serif,system-ui,-apple-system,"Segoe UI",Roboto,Helvetica,Arial}
    .wrap{max-width:1000px;margin:0 auto;padding:16px}
    header{display:flex;justify-content:space-between;align-items:center;margin:8px 0 14px}
    h1{font-size:18px;margin:0;font-weight:800;letter-spacing:.3px}
    .hud{display:flex;gap:12px;align-items:center;flex-wrap:wrap}
    .pill{background:#0b1229;border:1px solid #1f2937;border-radius:9999px;padding:8px 12px;display:flex;gap:8px;align-items:center}
    .btn{border:none;border-radius:10px;padding:10px 14px;background:var(--accent);color:#001018;font-weight:800;cursor:pointer}
    .btn.secondary{background:#1f2937;color:var(--ink);border:1px solid #334155}
    .layout{display:grid;gap:14px}
    @media(min-width:920px){.layout{grid-template-columns:2fr 1fr}}
    .stage{background:linear-gradient(#0f172a,#0b1020);border:1px solid #1f2937;border-radius:16px;padding:12px;box-shadow:0 10px 40px rgba(0,0,0,.35);position:relative}
    canvas{display:block;width:100%;height:auto;border-radius:12px;background:#0a0f1f}
    .side{display:grid;gap:10px}
    .card{background:var(--card);border:1px solid #1f2937;border-radius:14px;padding:12px}
    .title{font-weight:800;margin:0 0 8px;font-size:14px;color:#cbd5e1}
    .small{font-size:12px;color:var(--muted)}
    .skins{display:flex;gap:8px;flex-wrap:wrap}
    .chip{padding:6px 10px;border-radius:999px;border:1px solid #334155;cursor:pointer}
    .chip.active{background:#0ea5e9;color:#001018;border-color:#0ea5e9}
    table{width:100%;border-collapse:collapse}
    th,td{padding:8px;border-bottom:1px solid #1f2937;text-align:left;font-size:14px}
    .error{background:#fee2e2;color:#991b1b;border:1px solid #fecaca;border-radius:10px;padding:10px 12px;display:none}
    .success{background:#ecfdf5;color:#065f46;border:1px solid #a7f3d0;border-radius:10px;padding:10px 12px;display:none}
    /* touch controls */
    .touchbar{position:absolute;inset:auto 0 10px 0;display:flex;gap:10px;justify-content:center;pointer-events:none}
    .touchbar .tb{pointer-events:auto;background:#0b1229cc;border:1px solid #334155;color:#e5e7eb;padding:8px 12px;border-radius:10px}
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <h1>ü¶ñ T‚ÄëRex Runner ‚Äî Realistic Edition</h1>
      <div class="hud">
        <div class="pill">Player: <strong id="playerName">‚Ä¶</strong></div>
        <div class="pill">Score: <strong id="score">0</strong></div>
        <div class="pill">High: <strong id="high">0</strong></div>
        <div class="pill">Coins: <strong id="coins">0</strong></div>
        <button id="btnReset" class="btn secondary">Reset</button>
        <button id="btnPause" class="btn secondary">Pause</button>
      </div>
    </header><div class="layout">
  <section class="stage">
    <canvas id="game" width="900" height="260"></canvas>
    <div class="touchbar">
      <button class="tb" id="tbJump">Jump ‚¨ÜÔ∏è</button>
      <button class="tb" id="tbDuck">Duck ‚¨áÔ∏è</button>
    </div>
    <div id="err" class="error"></div>
    <div id="ok" class="success"></div>
  </section>
  <aside class="side">
    <div class="card">
      <p class="title">üé® Skins</p>
      <div class="skins" id="skins"></div>
      <p class="small">Skins tersimpan & ikut dibawa saat reload. Warna juga mempengaruhi efek partikel.</p>
    </div>
    <div class="card">
      <p class="title">üèÜ Leaderboard (Local Top 10)</p>
      <table>
        <thead><tr><th>Nama</th><th>Score</th><th>Coins</th></tr></thead>
        <tbody id="lbBody"><tr><td colspan="3" class="small">Belum ada data</td></tr></tbody>
      </table>
    </div>
    <div class="card">
      <p class="title">‚öôÔ∏è Opsi Fisika</p>
      <p class="small">Delta‚Äëtime, coyote jump, jump buffer, dan variable jump sudah aktif. Ubah angka di sini kalau mau tuning.</p>
      <div class="small" id="phys"></div>
    </div>
  </aside>
</div>

  </div>  <script>
    // ===== Utilities & Local State =====
    const $ = (s)=>document.querySelector(s);
    const nameEl=$('#playerName'), scoreEl=$('#score'), highEl=$('#high'), coinsEl=$('#coins');
    const canvas=$('#game'), ctx=canvas.getContext('2d');
    const ok=$('#ok'), err=$('#err');
    const showOk=(m)=>{ ok.textContent=m; ok.style.display='block'; setTimeout(()=> ok.style.display='none',2200); };
    const showErr=(m)=>{ err.textContent=m; err.style.display='block'; setTimeout(()=> err.style.display='none',4000); };

    const LS = { name:'trex_player_name', key:'trex_player_key', seq:'trex_player_seq', coins:'trex_coins_v2', high:'trex_highscore_v3', skin:'trex_skin_v1', lb:'trex_lb_offline_v1' };
    const normalize = (n)=> String(n||'').toLowerCase().replace(/[^a-z0-9_]/g,'');

    function ensureAutoName(){
      let name = localStorage.getItem(LS.name);
      let key  = localStorage.getItem(LS.key);
      if (name && key){ nameEl.textContent = name; return {name, key}; }
      const seq = (parseInt(localStorage.getItem(LS.seq)||'0',10)||0)+1;
      localStorage.setItem(LS.seq, String(seq));
      name = 'Trex'+seq; key = normalize(name);
      localStorage.setItem(LS.name, name);
      localStorage.setItem(LS.key, key);
      nameEl.textContent = name;
      return {name, key};
    }

    // ===== Skins =====
    const SKINS = [
      {id:'classic', label:'Classic', color:'#e5e7eb'},
      {id:'neon',    label:'Neon',    color:'#22d3ee'},
      {id:'lava',    label:'Lava',    color:'#fb7185'},
      {id:'forest',  label:'Forest',  color:'#34d399'},
    ];
    function renderSkins(active){
      const box=$('#skins'); box.innerHTML='';
      SKINS.forEach(s=>{
        const b=document.createElement('button');
        b.className='chip'+(s.id===active?' active':'');
        b.textContent=s.label; b.style.borderColor=s.color; b.style.color=s.color;
        b.onclick=()=>{ localStorage.setItem(LS.skin,s.id); renderSkins(s.id); };
        box.appendChild(b);
      });
    }
    const skinColor=()=>({classic:'#e5e7eb',neon:'#22d3ee',lava:'#fb7185',forest:'#34d399'})[localStorage.getItem(LS.skin)||'classic']||'#e5e7eb';

    // ===== Leaderboard (local) =====
    function updateLocalLeaderboard(name, high, coins){
      const lb = JSON.parse(localStorage.getItem(LS.lb)||'[]');
      const i = lb.findIndex(r=>r.name===name);
      const rec = {name, high, coins};
      if (i>=0) lb[i]=rec; else lb.push(rec);
      lb.sort((a,b)=> b.high-a.high || b.coins-a.coins);
      localStorage.setItem(LS.lb, JSON.stringify(lb.slice(0,10)));
    }
    function renderLeaderboard(){
      const body = $('#lbBody');
      const lb = JSON.parse(localStorage.getItem(LS.lb)||'[]');
      body.innerHTML = (lb.length? lb.map(r=>`<tr><td>${r.name}</td><td>${r.high}</td><td>${r.coins}</td></tr>`).join('') : '<tr><td colspan="3" class="small">Belum ada data</td></tr>');
    }

    // ===== Physics & Gameplay Params (delta‚Äëtime) =====
    const PHYS = {
      gravity: 2400,          // px/s^2
      jumpImpulse: -760,      // px/s
      duckScale: 0.6,         // crouch height factor
      coyoteTime: 120,        // ms after leaving ground still can jump
      jumpBuffer: 120,        // ms before landing keeps jump
      speed: 320,             // world px/s
      speedRamp: 0.06,        // per 10s
      spawnMin: 0.9,          // s
      spawnMax: 1.8,          // s
      birdChance: 0.25,       // probability of pterodactyl instead of cactus
      dayNightPeriod: 18,     // s for full cycle
      particles: 10           // landing dust amount
    };
    $('#phys').textContent = JSON.stringify(PHYS, null, 2);

    // ===== World & Entities =====
    const W = { w: canvas.width, h: canvas.height, groundY: canvas.height-26, t:0, dayPhase:0 };
    let score=0, best=parseInt(localStorage.getItem(LS.high)||'0',10)||0, coins=parseInt(localStorage.getItem(LS.coins)||'0',10)||0;
    scoreEl.textContent=score; highEl.textContent=best; coinsEl.textContent=coins;

    const player = {
      x: 80, y: W.groundY-40, w: 40, h: 40,
      vy: 0, onGround: true, crouch:false, lastGroundTime:0, lastJumpPress: -999,
      animTime: 0
    };

    const obstacles = []; // {type:'cactus'|'bird', x,y,w,h, vy?, fl flap}
    const particles = []; // {x,y,vx,vy,life}
    const layers = { // parallax layers
      stars: [], clouds: [], hills: []
    };

    // Populate parallax layers
    for(let i=0;i<80;i++) layers.stars.push({x:Math.random()*W.w, y:Math.random()*(W.h-80)*0.6+10, r:Math.random()*1.5+0.4});
    for(let i=0;i<6;i++) layers.clouds.push({x:Math.random()*W.w, y:30+Math.random()*90, w:70+Math.random()*120});
    for(let i=0;i<5;i++) layers.hills.push({x:Math.random()*W.w, y:W.groundY-8, w:80+Math.random()*160, h:20+Math.random()*30});

    // ===== Input (jump, variable jump, crouch) =====
    let paused=false;
    function pressJump(){ player.lastJumpPress = performance.now(); }
    function releaseJump(){ if (player.vy < -120) player.vy = -120; }
    function setCrouch(v){ player.crouch = v; }

    addEventListener('keydown', e=>{
      if (e.code==='Space'||e.code==='ArrowUp'){ pressJump(); e.preventDefault(); }
      if (e.code==='ArrowDown'){ setCrouch(true); }
      if (e.code==='KeyP'){ paused=!paused; if(!paused) loop(lastTS); }
    });
    addEventListener('keyup', e=>{
      if (e.code==='Space'||e.code==='ArrowUp'){ releaseJump(); }
      if (e.code==='ArrowDown'){ setCrouch(false); }
    });
    $('#tbJump').onclick=pressJump; $('#tbDuck').onpointerdown=()=>setCrouch(true); $('#tbDuck').onpointerup=()=>setCrouch(false);
    $('#btnPause').onclick=()=>{ paused=!paused; if(!paused) loop(lastTS); };

    // ===== Spawning =====
    let spawnTimer = 0; // seconds until next spawn
    function scheduleSpawn(){ spawnTimer = PHYS.spawnMin + Math.random()*(PHYS.spawnMax-PHYS.spawnMax*0 + (PHYS.spawnMax-PHYS.spawnMin)); }
    scheduleSpawn();

    function spawnObstacle(){
      if (Math.random() < PHYS.birdChance){
        // bird
        const h=24, w=34; const y = W.groundY - (60 + Math.random()*60);
        obstacles.push({type:'bird', x: W.w+20, y, w, h, vy:(Math.random()<0.3? 30:0), fl:0});
      } else {
        // cactus (1-3 stacks)
        const stacks = 1 + Math.floor(Math.random()*3);
        let w = 16*stacks+6, h = 26 + stacks*10;
        obstacles.push({type:'cactus', x: W.w+20, y: W.groundY-h, w, h});
      }
    }

    // ===== Particles =====
    function burstDust(x,y,color){
      for(let i=0;i<PHYS.particles;i++){
        particles.push({x, y, vx:(Math.random()*60-30), vy:-(Math.random()*120), life: 0.45+Math.random()*0.4, col:color});
      }
    }

    // ===== Drawing helpers =====
    function skyGradient(){
      // day-night cycle 0..1..2
      const p = (W.dayPhase % 1);
      const c1 = p<0.5? '#0a1024' : '#0c0f1a';
      const c2 = p<0.5? '#0e1636' : '#0a0f20';
      const g = ctx.createLinearGradient(0,0,0,W.h);
      g.addColorStop(0,c1); g.addColorStop(1,c2);
      return g;
    }
    function drawParallax(dt){
      // stars (slow)
      ctx.fillStyle = skyGradient();
      ctx.fillRect(0,0,W.w,W.h);
      ctx.globalAlpha = 0.9; ctx.fillStyle = '#e2e8f0';
      layers.stars.forEach(s=>{ ctx.globalAlpha = 0.3+Math.random()*0.2; ctx.fillRect(s.x,s.y,s.r,s.r); });
      ctx.globalAlpha = 1;
      // clouds
      ctx.fillStyle = '#b6c0d8';
      layers.clouds.forEach(cl=>{
        cl.x -= (PHYS.speed*0.15)*dt; if(cl.x+cl.w<0) cl.x=W.w+cl.w;
        roundRect(cl.x,cl.y,cl.w,18,9,true);
      });
      // hills
      ctx.fillStyle = '#0c1428';
      layers.hills.forEach(h=>{ h.x -= (PHYS.speed*0.25)*dt; if(h.x+h.w<0) h.x=W.w+h.w; roundRect(h.x,h.y-h.h,h.w,h.h,12,true); });
    }
    function roundRect(x,y,w,h,r,fill){
      ctx.beginPath(); ctx.moveTo(x+r,y); ctx.arcTo(x+w,y,x+w,y+h,r); ctx.arcTo(x+w,y+h,x,y+h,r); ctx.arcTo(x,y+h,x,y,r); ctx.arcTo(x,y,x+w,y,r); ctx.closePath(); if(fill) ctx.fill(); else ctx.stroke();
    }

    function drawGround(){
      // ground line
      ctx.fillStyle='#0b1229'; ctx.fillRect(0,W.groundY,W.w,26);
      // dashed marks for speed feel
      ctx.fillStyle='#162036';
      const dashW=24, gap=18; let x= -((W.t*PHYS.speed*0.8)% (dashW+gap));
      while(x<W.w){ ctx.fillRect(x,W.groundY+12,dashW,2); x+=dashW+gap; }
    }

    function drawPlayer(dt){
      // crouch alters hitbox height
      const targetH = player.crouch? player.h*PHYS.duckScale : 40;
      const curH = player.h + (targetH-player.h)*Math.min(1,dt*12);
      player.h = curH;
      // walk animation (2‚Äëframe)
      player.animTime += dt;
      const leg = Math.floor(player.animTime*10)%2;
      const col = skinColor(); ctx.fillStyle=col; roundRect(player.x,player.y,player.w,player.h,6,true);
      // legs
      ctx.fillStyle = '#0a0f1f';
      ctx.fillRect(player.x+8, player.y+player.h-6, 8, 4);
      ctx.fillRect(player.x+18, player.y+player.h-(leg?10:6), 8, 4);
    }

    function drawObstacles(dt){
      obstacles.forEach(o=>{
        o.x -= PHYS.speed*dt; // base scroll
        if (o.type==='bird'){ o.fl += dt*8; const flap = Math.sin(o.fl)*4; o.y += (o.vy||0)*dt; drawBird(o.x,o.y+flap,o.w,o.h); }
        else drawCactus(o.x,o.y,o.w,o.h);
      });
    }

    function drawCactus(x,y,w,h){ ctx.fillStyle='#6aa84f'; roundRect(x,y,w,h,4,true); }
    function drawBird(x,y,w,h){
      ctx.fillStyle='#cbd5e1'; roundRect(x,y,w,h,4,true);
      // wings
      ctx.fillStyle='#94a3b8'; ctx.fillRect(x-6,y+6,10,4); ctx.fillRect(x+w-4,y+6,10,4);
    }

    function drawParticles(dt){
      particles.forEach(p=>{ p.life -= dt; p.x += p.vx*dt; p.y += p.vy*dt; p.vy += PHYS.gravity*0.5*dt; });
      for(let i=particles.length-1;i>=0;i--) if(particles[i].life<=0) particles.splice(i,1);
      particles.forEach(p=>{ ctx.globalAlpha = Math.max(0,p.life); ctx.fillStyle=p.col||'#e5e7eb'; ctx.fillRect(p.x,p.y,2,2); ctx.globalAlpha=1; });
    }

    // ===== Update & Collision =====
    function rectsOverlap(a,b){ return a.x<b.x+b.w && a.x+a.w>b.x && a.y<b.y+b.h && a.y+a.h>b.y; }

    function update(dt){
      if (paused) return;
      // day-night progress
      W.dayPhase += dt/PHYS.dayNightPeriod;
      W.t += dt;
      // physics
      player.vy += PHYS.gravity*dt; player.y += player.vy*dt;
      if (player.y >= W.groundY - player.h){ // land
        const wasAir = !player.onGround;
        player.y = W.groundY - player.h; player.vy = 0; player.onGround = true; player.lastGroundTime = performance.now();
        if (wasAir) burstDust(player.x+10, W.groundY-4, skinColor());
      } else player.onGround=false;

      // jump logic (coyote + buffer + variable jump)
      const now = performance.now();
      const canCoyote = (now - player.lastGroundTime) <= PHYS.coyoteTime;
      const buffered = (now - player.lastJumpPress) <= PHYS.jumpBuffer;
      if ((player.onGround || canCoyote) && buffered){ player.vy = PHYS.jumpImpulse; player.lastJumpPress = -999; }

      // spawn
      spawnTimer -= dt; if (spawnTimer<=0){ spawnObstacle(); scheduleSpawn(); }

      // move & cull obstacles
      for(let i=obstacles.length-1;i>=0;i--){ const o=obstacles[i]; if(o.x+o.w < -40) obstacles.splice(i,1); }

      // scoring
      score += dt*10; scoreEl.textContent = String(Math.floor(score));

      // collisions
      const hitbox = { x:player.x+6, y:player.y+4, w:player.w-12, h:player.h-6 };
      for(const o of obstacles){ if (rectsOverlap(hitbox,o)){ gameOver(); return; } }

      // ramp
      PHYS.speed += PHYS.speedRamp*dt; // gentle acceleration
    }

    function render(dt){
      // camera shake on game over handled in gameOver()
      drawParallax(dt); drawGround(); drawObstacles(dt); drawPlayer(dt); drawParticles(dt);
    }

    // ===== Loop (delta‚Äëtime, capped) =====
    let running=true, lastTS=performance.now();
    function loop(ts){
      if (!running) return; const dt = Math.min(0.033, (ts-lastTS)/1000); lastTS=ts; update(dt); render(dt); requestAnimationFrame(loop);
    }

    // ===== End / Reset =====
    function gameOver(){
      running=false;
      // coin gain based on distance
      const gained = Math.max(1, Math.floor(score/25));
      coins += gained; localStorage.setItem(LS.coins, String(coins)); coinsEl.textContent=String(coins);
      const s = Math.floor(score); if (s>best){ best=s; localStorage.setItem(LS.high,String(best)); highEl.textContent=String(best); }
      updateLocalLeaderboard(localStorage.getItem(LS.name)||'Trex?', best, coins); renderLeaderboard();
      // screen shake + message
      screenShake(12, 260);
      showOk(`Game Over! +${gained} coin`);
    }
    function screenShake(intensity, ms){
      const end = performance.now()+ms; const baseTransform = canvas.style.transform;
      (function shake(){
        const t=performance.now(); if(t>end){ canvas.style.transform=baseTransform; return; }
        const dx=(Math.random()-0.5)*intensity, dy=(Math.random()-0.5)*intensity;
        canvas.style.transform=`translate(${dx}px,${dy}px)`; requestAnimationFrame(shake);
      })();
    }
    function reset(){
      // reset all
      score=0; PHYS.speed=320; obstacles.length=0; particles.length=0;
      player.y=W.groundY-40; player.h=40; player.vy=0; player.onGround=true; player.crouch=false; player.animTime=0;
      running=true; lastTS=performance.now(); scheduleSpawn(); loop(lastTS);
    }
    $('#btnReset').onclick=reset;

    // ===== Boot =====
    (function boot(){
      renderSkins(localStorage.getItem(LS.skin)||'classic');
      const {name}=ensureAutoName(); nameEl.textContent=name;
      renderLeaderboard();
      lastTS=performance.now(); requestAnimationFrame(loop);
    })();
  </script></body>
</html>